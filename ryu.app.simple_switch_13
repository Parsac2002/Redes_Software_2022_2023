# Copyright (C) 2011 Nippon Telegraph and Telephone Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ether_types
from ryu.lib.packet import ipv6




class SimpleSwitch13(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(SimpleSwitch13, self).__init__(*args, **kwargs)
        self.mac_to_port = {}

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)#responde a las peticiones de configuracion que manda el switch.
    def switch_features_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        #in_port = msg.match['in_port']
        # install table-miss flow entry
        #
        # We specify NO BUFFER to max_len of the output action due to
        # OVS bug. At this moment, if we specify a lesser number, e.g.,
        # 128, OVS will send Packet-In with invalid buffer_id and
        # truncated packet data. In that case, we cannot output packets
        # correctly.  The bug has been fixed in OVS v2.1.0.
    
        # pkt = packet.Packet(msg.data)
        # eth = pkt.get_protocols(ethernet.ethernet)[0]#devuelve una lista de protocolos de nivel de enlace (guarda 1a opcion)
        
        
        
        # pkt_ipv6 = pkt.get_protocol(ipv6.ipv6)#devuelve el primer miembro de la lista de protocolos que corresponden a ipv6.
        # if eth.ethertype == ether_types.ETH_TYPE_LLDP:
        #     #ethertype es un atributo de la clase ethernet que siempre es el mismo (0x0800)
        #     # ignore lldp packet
        #     self.dropActions(parser = parser, ofproto = ofproto)
        # if pkt_ipv6.ipv6 == ether_types.ETH_TYPE_IPV6 :
        #     # ignore ipv6 packet (0x86DD)
        #     self.dropActions(parser = parser, ofproto = ofproto)

        # #Impresion del paquete entrante al switch:
        # dst = eth.dst
        # src = eth.src

        # dpid = format(datapath.id, "d").zfill(16)
        # #self.mac_to_port.setdefault(dpid, {})

        # self.logger.info("packet in %s %s %s", dpid, src, dst)


        #fLUJOS PARA LLDP E IPV6:
        # LLDP -> 
        match_LLDP = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_LLDP)
        actions_LLDP = self.dropActions(parser = parser, ofproto = ofproto)
        self.add_flow(datapath= datapath, priority = 10000, match = match_LLDP, actions = actions_LLDP)
        # IPV6 -> 
        match_IPV6 = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IPV6)
        actions_IPV6 = self.dropActions(parser = parser, ofproto = ofproto)
        self.add_flow(datapath= datapath, priority = 10000, match = match_IPV6, actions = actions_IPV6)


        #Paquetes desde h1 a h2:
        match_1 = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst=('10.0.1.0', '255.255.255.0'))
        actions_1 = self.forwardActions(parser = parser, ofproto = ofproto, port = 2, src = "70:88:99:00:00:02", dst = "00:00:00:00:00:02" )
        self.add_flow(datapath= datapath, priority = 1000, match = match_1, actions = actions_1)
        
        #Paquetes desde h2 a h1:
        match_2 = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_dst=('10.0.0.0', '255.255.255.0'))
        actions_2 = self.forwardActions(parser = parser, ofproto = ofproto, port = 1 , src = "70:88:99:00:00:01", dst = "00:00:00:00:00:01" )
        self.add_flow(datapath= datapath, priority = 1000, match = match_2, actions = actions_2)
        
        #Resto de paquetes:
        match_0 = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                        ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match_0, actions)


        

    def forwardActions(self, parser, ofproto, port, src, dst):
        return [
        #parser.OFPActionDecNwTtl(len = 1),
        parser.OFPActionSetField(eth_src=src),
        parser.OFPActionSetField(eth_dst=dst),
        parser.OFPActionDecNwTtl(),
        parser.OFPActionOutput(port),
        ]
    def dropActions(self, parser, ofproto):
        return [ ]
    

    def add_flow(self, datapath, priority, match, actions, buffer_id=None):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,
                                            actions)]
        if buffer_id:
            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,
                                    priority=priority, match=match,
                                    instructions=inst)
        else:
            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                    match=match, instructions=inst)
        datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)#
    def _packet_in_handler(self, ev):
        # If you hit this you might want to increase
        # the "miss_send_length" of your switch
        if ev.msg.msg_len < ev.msg.total_len:
            self.logger.debug("packet truncated: only %s of %s bytes",
                            ev.msg.msg_len, ev.msg.total_len)
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]#devuelve una lista de protocolos de nivel de enlace (guarda 1a opcion)
        #pkt_ipv6 = pkt.get_protocol(ipv6.ipv6)#devuelve el primer miembro de la lista de protocolos que corresponden a ipv6.

        # if eth.ethertype == ether_types.ETH_TYPE_LLDP:
        #     #ethertype es un atributo de la clase ethernet que siempre es el mismo (0x0800)
        #     # ignore lldp packet
        #     return
        # if pkt_ipv6.ipv6 == ether_types.ETH_TYPE_IPV6 :
        #     # ignore ipv6 packet (0x86DD)
        #     return 
        dst = eth.dst
        src = eth.src

        dpid = format(datapath.id, "d").zfill(16)
        self.mac_to_port.setdefault(dpid, {})

        self.logger.info("packet in %s %s %s %s", dpid, src, dst, in_port)

        # # learn a mac address to avoid FLOOD next time.
        # self.mac_to_port[dpid][src] = in_port

        # if dst in self.mac_to_port[dpid]:
        #     out_port = self.mac_to_port[dpid][dst]
        # else:
        #     out_port = ofproto.OFPP_FLOOD

        # actions = [parser.OFPActionOutput(out_port)]

        # # install a flow to avoid packet_in next time
        # if out_port != ofproto.OFPP_FLOOD:
        #     match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)
        #     # verify if we have a valid buffer_id, if yes avoid to send both
        #     # flow_mod & packet_out
        #     if msg.buffer_id != ofproto.OFP_NO_BUFFER:
        #         self.add_flow(datapath, 1, match, actions, msg.buffer_id)
        #         return
        #     else:
        #         self.add_flow(datapath, 1, match, actions)
        # data = None
        # if msg.buffer_id == ofproto.OFP_NO_BUFFER:
        #     data = msg.data

        # out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,
        #                           in_port=in_port, actions=actions, data=data)
        # datapath.send_msg(out)
